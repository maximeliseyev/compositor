//
//  NodeGraphProcessor.swift
//  Compositor
//
//  Created by Maxim Eliseyev on 19.07.2025.
//

import Foundation
import CoreImage
import Combine
import SwiftUI

/// –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä–∞—Ñ–∞ –Ω–æ–¥ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
@MainActor
class NodeGraphProcessor: ObservableObject {
    private weak var nodeGraph: NodeGraph? // Weak reference to prevent retain cycles
    private var cancellables = Set<AnyCancellable>()
    
    // –ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    private var processCache: [UUID: CIImage] = [:]
    private var nilCache: Set<UUID> = [] // –û—Ç–¥–µ–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è nil –∑–Ω–∞—á–µ–Ω–∏–π
    private var lastProcessTime: [UUID: Date] = [:]
    
    // Memory management constants
    private let maxCacheSize = 50
    private let cacheExpirationTime: TimeInterval = 30.0
    
    init(nodeGraph: NodeGraph) {
        self.nodeGraph = nodeGraph
        setupSubscriptions()
    }
    
    private func setupSubscriptions() {
        guard let nodeGraph = nodeGraph else { return }
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–µ
        nodeGraph.$connections
            .sink { [weak self] _ in
                self?.invalidateCache()
                self?.processGraph()
            }
            .store(in: &cancellables)
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–¥
        nodeGraph.$nodes
            .sink { [weak self] _ in
                self?.invalidateCache()
                self?.processGraph()
            }
            .store(in: &cancellables)
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å –≥—Ä–∞—Ñ –Ω–æ–¥
    func processGraph() {
        guard nodeGraph != nil else { return }
        
        cleanupExpiredCache()
        let sortedNodes = topologicalSort()
        
        #if DEBUG
        print("üßÆ Processing graph, nodes order: \(sortedNodes.map{ $0.type.rawValue })")
        #endif
        
        for node in sortedNodes {
            processNode(node)
        }
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–æ–¥—É
    func processNode(_ node: BaseNode) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–¥
        let inputs = getInputsForNode(node)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è InputNode
        if node is InputNode {
            let inputNode = node as! InputNode
            if inputNode.currentFrame == nil {
                #if DEBUG
                print("‚ö†Ô∏è Node \(node.type.rawValue) produced nil - no current frame")
                #endif
                nilCache.insert(node.id)
                processCache.removeValue(forKey: node.id)
                lastProcessTime[node.id] = Date()
                return
            }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–¥—É
        let output = node.processWithCache(inputs: inputs)
        #if DEBUG
        if let out = output {
            print("‚úÖ Node \(node.type.rawValue) produced: extent=\(out.extent)")
        } else {
            print("‚ö†Ô∏è Node \(node.type.rawValue) produced nil")
        }
        #endif
        
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if let output = output {
            processCache[node.id] = output
            nilCache.remove(node.id)
        } else {
            nilCache.insert(node.id)
            processCache.removeValue(forKey: node.id)
        }
        lastProcessTime[node.id] = Date()
        
        // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è InputNode - –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞
        if let inputNode = node as? InputNode {
            setupInputNodeObservation(inputNode)
        }
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–¥—ã –∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö output-–Ω–æ–¥
    private func getInputsForNode(_ node: BaseNode) -> [CIImage?] {
        guard let nodeGraph = nodeGraph else { return [] }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º input connections –ø–æ –ø–æ—Ä—è–¥–∫—É –ø–æ—Ä—Ç–æ–≤
        let sortedInputs = node.inputPorts.map { inputPort in
            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —ç—Ç–æ–º—É input –ø–æ—Ä—Ç—É
            let connection = nodeGraph.connections.first { conn in
                conn.toNode == node.id && conn.toPort == inputPort.id
            }
            
            guard let connection = connection else {
                return nil as CIImage?
            }
            
            // –ù–∞—Ö–æ–¥–∏–º source –Ω–æ–¥—É
            guard let sourceNode = nodeGraph.nodes.first(where: { $0.id == connection.fromNode }) else {
                return nil
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º source –Ω–æ–¥—É
            if let lastTime = lastProcessTime[sourceNode.id],
               Date().timeIntervalSince(lastTime) < 0.1 {
                if let cachedResult = processCache[sourceNode.id] {
                    return cachedResult
                } else if nilCache.contains(sourceNode.id) {
                    return nil
                }
            }
            
            // –ï—Å–ª–∏ –∫—ç—à –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º source –Ω–æ–¥—É
            let sourceOut = sourceNode.processWithCache(inputs: getInputsForNode(sourceNode))
            #if DEBUG
            if let so = sourceOut {
                print("‚Ü™Ô∏è  input for \(node.type.rawValue) from \(sourceNode.type.rawValue): extent=\(so.extent)")
            } else {
                print("‚Ü™Ô∏è  input for \(node.type.rawValue) from \(sourceNode.type.rawValue): nil")
            }
            #endif
            return sourceOut
        }
        
        return sortedInputs
    }
    
    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ InputNode
    private func setupInputNodeObservation(_ inputNode: InputNode) {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        inputNode.$ciImage
            .dropFirst()
            .sink { [weak self] _ in
                self?.onInputNodeChanged(inputNode)
            }
            .store(in: &cancellables)
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ–¥–∏–∞
        inputNode.$currentFrame
            .dropFirst()
            .sink { [weak self] _ in
                self?.onInputNodeChanged(inputNode)
            }
            .store(in: &cancellables)
    }
    
    /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ InputNode
    private func onInputNodeChanged(_ inputNode: InputNode) {
        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–π –Ω–æ–¥—ã
        processCache.removeValue(forKey: inputNode.id)
        nilCache.remove(inputNode.id)
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —ç—Ç–æ–π input –Ω–æ–¥—ã
        let dependentNodes = findDependentNodes(for: inputNode)
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –Ω–æ–¥—ã
        for dependentNode in dependentNodes {
            processNode(dependentNode)
        }
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –Ω–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –¥–∞–Ω–Ω–æ–π –Ω–æ–¥—ã
    private func findDependentNodes(for sourceNode: BaseNode) -> [BaseNode] {
        var dependentNodes: [BaseNode] = []
        var visited: Set<UUID> = []
        
        func collectDependents(_ node: BaseNode) {
            guard !visited.contains(node.id) else { return }
            visited.insert(node.id)
            
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–π –Ω–æ–¥—ã
            guard let nodeGraph = nodeGraph else { return }
            let outgoingConnections = nodeGraph.connections.filter { $0.fromNode == node.id }
            
            for connection in outgoingConnections {
                if let dependentNode = nodeGraph.nodes.first(where: { $0.id == connection.toNode }) {
                    dependentNodes.append(dependentNode)
                    collectDependents(dependentNode)
                }
            }
        }
        
        collectDependents(sourceNode)
        return dependentNodes
    }
    
    /// –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–¥ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    private func topologicalSort() -> [BaseNode] {
        guard let nodeGraph = nodeGraph else { return [] }
        
        var sorted: [BaseNode] = []
        var visited: Set<UUID> = []
        var visiting: Set<UUID> = []
        
        func visit(_ node: BaseNode) {
            if visiting.contains(node.id) {
                // –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–∏–∫–ª - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                return
            }
            
            if visited.contains(node.id) {
                return
            }
            
            visiting.insert(node.id)
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            let dependencies = getDependencies(for: node)
            for dependency in dependencies {
                visit(dependency)
            }
            
            visiting.remove(node.id)
            visited.insert(node.id)
            sorted.append(node)
        }
        
        for node in nodeGraph.nodes {
            if !visited.contains(node.id) {
                visit(node)
            }
        }
        
        return sorted
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–¥—ã
    private func getDependencies(for node: BaseNode) -> [BaseNode] {
        guard let nodeGraph = nodeGraph else { return [] }
        
        var dependencies: [BaseNode] = []
        
        for connection in nodeGraph.connections {
            if connection.toNode == node.id {
                if let sourceNode = nodeGraph.nodes.first(where: { $0.id == connection.fromNode }) {
                    dependencies.append(sourceNode)
                }
            }
        }
        
        return dependencies
    }
    
    /// –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞
    private func cleanupExpiredCache() {
        let now = Date()
        let expiredKeys = lastProcessTime.compactMap { (key, time) in
            now.timeIntervalSince(time) > cacheExpirationTime ? key : nil
        }
        
        for key in expiredKeys {
            processCache.removeValue(forKey: key)
            nilCache.remove(key)
            lastProcessTime.removeValue(forKey: key)
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if processCache.count > maxCacheSize {
            let sortedKeys = lastProcessTime.sorted { $0.value < $1.value }.map { $0.key }
            let keysToRemove = sortedKeys.prefix(processCache.count - maxCacheSize)
            
            for key in keysToRemove {
                processCache.removeValue(forKey: key)
                nilCache.remove(key)
                lastProcessTime.removeValue(forKey: key)
            }
        }
    }
    
    /// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–µ—Å—å –∫—ç—à
    func invalidateCache() {
        processCache.removeAll()
        nilCache.removeAll()
        lastProcessTime.removeAll()
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–¥—ã –∏–∑ –∫—ç—à–∞
    func getCachedResult(for nodeId: UUID) -> CIImage? {
        if let cachedResult = processCache[nodeId] {
            return cachedResult
        } else if nilCache.contains(nodeId) {
            return nil
        }
        return nil
    }
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–æ–¥—É
    func forceProcessNode(_ node: BaseNode) {
        processCache.removeValue(forKey: node.id)
        nilCache.remove(node.id)
        processNode(node)
    }
    
    /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã
    func cleanup() {
        invalidateCache()
        cancellables.removeAll()
    }
}

//
//  InputNode.swift
//  Compositor
//
//  Created by Maxim Eliseyev on 14.07.2025.
//

import SwiftUI
import CoreImage
import AVFoundation
import UniformTypeIdentifiers

// MARK: - Media Types (Legacy - –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
enum MediaType {
    case image
    case video
    case proRes
}

class InputNode: BaseNode {
    // Universal Media Properties
    @Published var mediaProcessor: UniversalMediaProcessor?
    @Published var mediaFormat: MediaFormat?
    @Published var mediaInfo: MediaFileInfo?
    @Published var currentFrame: CIImage?
    
    // Legacy Properties (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    @Published var nsImage: NSImage?
    @Published var ciImage: CIImage?
    @Published var mediaType: MediaType = .image
    @Published var isVideoLoading: Bool = false
    @Published var videoURL: URL?
    
    // Playback state
    @Published var isPlaying: Bool = false
    @Published var currentTime: Double = 0.0
    @Published var duration: Double = 0.0
    
    // File properties
    @Published var fileName: String?
    @Published var fileSize: String?
    
    // Security-scoped bookmark access
    private var securityScopedURL: URL?
    
    // Performance constants
    private let DEFAULT_PREVIEW_FRAME_INDEX = 0 // –ò–Ω–¥–µ–∫—Å –∫–∞–¥—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    private let FRAME_CACHE_LIMIT = 30 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –≤ –∫—ç—à–µ
    private let MEDIA_LOAD_TIMEOUT = 30.0 // –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    // Cache –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    private var frameCache: [Double: CIImage] = [:]
    private var lastSeekTime: Double = -1.0
    
    init(position: CGPoint) {
        super.init(type: .input, position: position)
    }
    
    // MARK: - Public Methods
    
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (Legacy)
    func getMediaType(for url: URL) -> MediaType {
        let pathExtension = url.pathExtension.lowercased()
        let videoExtensions = ["mov", "mp4", "m4v", "avi", "mkv", "webm", "3gp", "3g2", "asf", "wmv", "flv", "f4v", "ts", "m2ts", "mts"]
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ ProRes —Ñ–∞–π–ª–æ–º
        if isProResFile(url) {
            print("üé¨ InputNode: Detected ProRes file - \(url.lastPathComponent)")
            return .proRes
        }
        
        return videoExtensions.contains(pathExtension) ? .video : .image
    }
    
    /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
    func detectMediaFormat(for url: URL) async -> MediaFormat? {
        return await MediaFormatDetector.detectFormat(for: url)
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    @MainActor
    func loadMediaFile(from url: URL) async {
        do {
            // –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É
            guard url.startAccessingSecurityScopedResource() else {
                print("‚ùå InputNode: Failed to access security-scoped resource")
                return
            }
            
            defer {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø
                url.stopAccessingSecurityScopedResource()
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if mediaProcessor == nil {
                mediaProcessor = UniversalMediaProcessor()
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
            mediaFormat = await detectMediaFormat(for: url)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º mediaType –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞
            if let format = mediaFormat {
                if format.isVideo || format.isProRes {
                    mediaType = .video
                    print("üé¨ InputNode: Set mediaType to .video for format: \(format.rawValue)")
                } else {
                    mediaType = .image
                    print("üñºÔ∏è InputNode: Set mediaType to .image for format: \(format.rawValue)")
                }
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            mediaInfo = try await mediaProcessor?.loadMedia(from: url)
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            if let frames = try await mediaProcessor?.extractFrames(from: url, maxFrames: 1) {
                currentFrame = frames.first
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            fileName = url.lastPathComponent
            videoURL = url // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            
            if let info = mediaInfo {
                fileSize = formatFileSize(info.fileSize)
                duration = info.duration ?? 0.0 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                print("üé¨ InputNode: Duration set to \(duration)s")
            }
            
            print("üé¨ InputNode: Successfully loaded \(mediaFormat?.rawValue ?? "unknown") file")
            
        } catch {
            print("‚ùå InputNode: Error loading media file: \(error)")
        }
    }
    
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private func formatFileSize(_ bytes: Int64) -> String {
        let formatter = ByteCountFormatter()
        formatter.allowedUnits = [.useMB, .useGB]
        formatter.countStyle = .file
        return formatter.string(fromByteCount: bytes)
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª ProRes
    private func isProResFile(_ url: URL) -> Bool {
        let pathExtension = url.pathExtension.lowercased()
        
        // ProRes —Ñ–∞–π–ª—ã –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .mov
        if pathExtension == "mov" {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ AVAsset –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–µ–∫–∞
            let asset = AVAsset(url: url)
            
            Task {
                do {
                    let tracks = try await asset.loadTracks(withMediaType: .video)
                    if let videoTrack = tracks.first {
                        let formatDescriptions = try await videoTrack.load(.formatDescriptions)
                        if let formatDescription = formatDescriptions.first {
                            let codecType = CMFormatDescriptionGetMediaSubType(formatDescription)
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º ProRes –∫–æ–¥–µ–∫–∏
                            let proResCodecs: [FourCharCode] = [
                                0x61703434, // 'ap44' - ProRes 4444
                                0x61706871, // 'aphq' - ProRes 422 HQ
                                0x61703232, // 'ap22' - ProRes 422
                                0x61706c74, // 'aplt' - ProRes 422 LT
                                0x61707078  // 'appx' - ProRes 422 Proxy
                            ]
                            
                            if proResCodecs.contains(codecType) {
                                print("üé¨ InputNode: ProRes variant detected")
                            }
                        }
                    }
                } catch {
                    print("‚ö†Ô∏è InputNode: Error checking ProRes codec: \(error)")
                }
            }
            
            return true
        }
        
        return false
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∞—Ä–∏–∞–Ω—Ç–∞ ProRes –ø–æ –∫–æ–¥–µ–∫—É
    private func getProResVariantString(from codecType: FourCharCode) -> String {
        switch codecType {
        case 0x61703434: return "ProRes 4444" // 'ap44'
        case 0x61706871: return "ProRes 422 HQ" // 'aphq'
        case 0x61703232: return "ProRes 422" // 'ap22'
        case 0x61706c74: return "ProRes 422 LT" // 'aplt'
        case 0x61707078: return "ProRes 422 Proxy" // 'appx'
        default: return "ProRes 422 HQ"
        }
    }
    
    // MARK: - Legacy Methods (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª (Legacy)
    func loadVideo(from url: URL) async {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        await loadMediaFile(from: url)
    }
    
    /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤–∏–¥–µ–æ (Legacy)
    func play() {
        isPlaying = true
        print("‚ñ∂Ô∏è InputNode: Play started")
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (Legacy)
    func pause() {
        isPlaying = false
        print("‚è∏Ô∏è InputNode: Pause started")
    }
    
    /// –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ—Ç –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (Legacy) - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    @MainActor
    func seek(to time: Double) {
        let clampedTime = max(0, min(time, duration))
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏ –º—ã —Ç–æ—Ç –∂–µ –∫–∞–¥—Ä
        if abs(clampedTime - lastSeekTime) < 0.016 { // –ú–µ–Ω—å—à–µ –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞ –ø—Ä–∏ 60fps
            return
        }
        
        currentTime = clampedTime
        lastSeekTime = clampedTime
        print("‚è© InputNode: Seek to \(currentTime)s")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–≥–æ –∫–∞–¥—Ä–∞
        if let cachedFrame = frameCache[clampedTime] {
            currentFrame = cachedFrame
            print("üé¨ InputNode: Using cached frame at \(clampedTime)s")
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –∫—ç—à–µ
            Task {
                await updateCurrentFrame()
            }
        }
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    @MainActor
    private func updateCurrentFrame() async {
        guard let processor = mediaProcessor,
              let url = videoURL,
              mediaType == .video else { return }
        
        do {
            // –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É
            guard url.startAccessingSecurityScopedResource() else {
                print("‚ùå InputNode: Failed to access security-scoped resource for frame update")
                return
            }
            
            defer {
                url.stopAccessingSecurityScopedResource()
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            let frameTime = currentTime
            let frames = try await processor.extractFrames(from: url, maxFrames: 1, startTime: frameTime)
            if let firstFrame = frames.first {
                currentFrame = firstFrame
                
                // –ö—ç—à–∏—Ä—É–µ–º –∫–∞–¥—Ä
                frameCache[frameTime] = firstFrame
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                if frameCache.count > FRAME_CACHE_LIMIT {
                    let sortedKeys = frameCache.keys.sorted()
                    let keysToRemove = sortedKeys.prefix(frameCache.count - FRAME_CACHE_LIMIT)
                    for key in keysToRemove {
                        frameCache.removeValue(forKey: key)
                    }
                }
                
                print("üé¨ InputNode: Updated frame at \(frameTime)s")
            }
        } catch {
            print("‚ùå InputNode: Error updating frame: \(error)")
        }
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä (Legacy)
    func getCurrentFrame() -> CIImage? {
        return currentFrame
    }
    
    // MARK: - Cleanup
    
    /// –û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
    func cleanup() {
        mediaProcessor = nil
        mediaFormat = nil
        mediaInfo = nil
        currentFrame = nil
        fileName = nil
        fileSize = nil
        frameCache.removeAll()
        print("üßπ InputNode: Cleanup completed")
    }
    
    // MARK: - BaseNode Override
    
    override func process(inputs: [CIImage?]) -> CIImage? {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä –∫–∞–∫ –≤—ã—Ö–æ–¥
        return currentFrame
    }
} 

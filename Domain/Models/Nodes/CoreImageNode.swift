//
//  CoreImageNode.swift
//  Compositor
//
//  Created by Maxim Eliseyev on 14.07.2025.
//

import SwiftUI
import CoreImage

// MARK: - Core Image Node

/// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –Ω–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö Core Image —Ñ–∏–ª—å—Ç—Ä—ã
/// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ Metal
class CoreImageNode: BaseNode {
    
    // MARK: - Core Image Properties
    private let context = CIContext()
    
    // MARK: - Performance Tracking
    @Published var coreImageProcessingTime: TimeInterval = 0.0
    @Published var filterCacheHits: Int = 0
    @Published var totalProcessingCount: Int = 0
    
    // MARK: - Filter Cache
    private var filterCache: [String: CIFilter] = [:]
    
    // MARK: - Initialization
    override init(type: NodeType, position: CGPoint) {
        super.init(type: type, position: position)
        setupCoreImageNode()
    }
    
    // MARK: - Setup
    private func setupCoreImageNode() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –¥–ª—è Core Image –Ω–æ–¥
        print("üñºÔ∏è CoreImageNode initialized for type: \(type.rawValue)")
    }
    
    // MARK: - Core Image Processing Override
    
    override func process(inputs: [CIImage?]) -> CIImage? {
        let startTime = CFAbsoluteTimeGetCurrent()
        
        let result = processWithCoreImage(inputs: inputs)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        let processingTime = CFAbsoluteTimeGetCurrent() - startTime
        updatePerformanceMetrics(processingTime: processingTime)
        
        return result
    }
    
    override func processAsync(inputs: [CIImage?]) async throws -> CIImage? {
        let startTime = CFAbsoluteTimeGetCurrent()
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        let result = await withCheckedContinuation { continuation in
            DispatchQueue.global(qos: .userInitiated).async {
                let processedResult = self.processWithCoreImage(inputs: inputs)
                continuation.resume(returning: processedResult)
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        let processingTime = CFAbsoluteTimeGetCurrent() - startTime
        updatePerformanceMetrics(processingTime: processingTime)
        
        return result
    }
    
    // MARK: - Core Image Processing
    
    /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ Core Image
    /// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    func processWithCoreImage(inputs: [CIImage?]) -> CIImage? {
        // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö
        return inputs.first ?? nil
    }
    
    // MARK: - Filter Management
    
    /// –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    func getOrCreateFilter(name: String) -> CIFilter? {
        if let cachedFilter = filterCache[name] {
            filterCacheHits += 1
            return cachedFilter
        }
        
        let filter = CIFilter(name: name)
        if filter != nil {
            filterCache[name] = filter
        }
        
        return filter
    }
    
    /// –û—á–∏—â–∞–µ—Ç –∫—ç—à —Ñ–∏–ª—å—Ç—Ä–æ–≤
    func clearFilterCache() {
        filterCache.removeAll()
    }
    
    // MARK: - Performance Monitoring
    
    private func updatePerformanceMetrics(processingTime: TimeInterval) {
        self.coreImageProcessingTime = processingTime
        self.totalProcessingCount += 1
    }
    
    // MARK: - Utility Methods
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Core Image —Ñ–∏–ª—å—Ç—Ä–∞
    func getCoreImageParameters() -> [String: Any] {
        var params: [String: Any] = [:]
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–ª—è Core Image
        for (key, value) in parameters {
            if let floatValue = value as? Float {
                params[key] = NSNumber(value: floatValue)
            } else if let intValue = value as? Int {
                params[key] = NSNumber(value: intValue)
            } else if let doubleValue = value as? Double {
                params[key] = NSNumber(value: doubleValue)
            } else if let boolValue = value as? Bool {
                params[key] = NSNumber(value: boolValue)
            } else {
                params[key] = value
            }
        }
        
        return params
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    func getPerformanceInfo() -> String {
        let cacheHitRate = totalProcessingCount > 0 ? 
            Double(filterCacheHits) / Double(totalProcessingCount) : 0.0
        
        return """
        Core Image: Active
        Processing time: \(String(format: "%.3f", coreImageProcessingTime))s
        Total operations: \(totalProcessingCount)
        Cache hit rate: \(String(format: "%.1f", cacheHitRate * 100))%
        """
    }
    
    // MARK: - Cache Invalidation
    
    override func invalidateCache() {
        super.invalidateCache()
        // –û—á–∏—â–∞–µ–º –∫—ç—à —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        clearFilterCache()
    }
}

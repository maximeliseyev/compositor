//
//  VideoProcessor.swift
//  Compositor
//
//  Created by Maxim Eliseyev on 14.07.2025.
//

import AVFoundation
import CoreImage
#if os(macOS)
import AppKit
import CoreVideo
#else
import UIKit
#endif

@MainActor
class VideoProcessor: ObservableObject {
    @Published var isLoading = false
    @Published var currentFrame: CIImage?
    @Published var duration: Double = 0
    @Published var currentTime: Double = 0
    @Published var isPlaying = false
    
    private var player: AVPlayer?
    private var playerItem: AVPlayerItem?
    private var videoOutput: AVPlayerItemVideoOutput?
    private var asset: AVAsset?
    
#if os(macOS)
    private var displayLink: CVDisplayLink?
    #else
    private var displayLink: CADisplayLink?
    #endif
    
    // –î–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
    private var imageGenerator: AVAssetImageGenerator?
    
    // –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    private var loadedURL: URL?
    private var frameCache: [Double: CIImage] = [:]
    private let maxCacheSize = PerformanceConstants.videoFrameCacheSize
    private var lastSeekTime: Double = -1.0
    
    init() {
        setupVideoOutput()
    }
    
    deinit {
        // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        player?.pause()
        // stopDisplayLink() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ @MainActor –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    }
    
    // MARK: - Public Methods
    
    func loadVideo(from url: URL) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–∏ –º—ã —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª
        if loadedURL == url && player != nil {
            print("üé¨ VideoProcessor: Video already loaded, skipping reload")
            return
        }
        
        isLoading = true
        print("üé¨ VideoProcessor.loadVideo url=\(url.lastPathComponent)")
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫—ç—à
        frameCache.removeAll()
        loadedURL = url
        
        // –°–æ–∑–¥–∞–µ–º AVAsset –∏–∑ URL
        asset = AVAsset(url: url)
        
        guard let asset = asset else {
            isLoading = false
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ
        Task {
            do {
                let tracks = try await asset.loadTracks(withMediaType: .video)
                guard !tracks.isEmpty else {
                    print("‚ö†Ô∏è No video tracks found")
                    isLoading = false
                    return
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                let duration = try await asset.load(.duration)
                self.duration = CMTimeGetSeconds(duration)
                print("‚è±Ô∏è Video duration set: \(self.duration)")
                
                // –°–æ–∑–¥–∞–µ–º player item
                let playerItem = AVPlayerItem(asset: asset)
                self.playerItem = playerItem
                
                // –°–æ–∑–¥–∞–µ–º player
                let player = AVPlayer(playerItem: playerItem)
                self.player = player
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º video output
                setupVideoOutput()
                print("üîå Video output attached: \(self.videoOutput != nil)")
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä
                await loadFirstFrame()
                
                isLoading = false
                print("‚úÖ VideoProcessor finished loading")
                
            } catch {
                print("‚ùå VideoProcessor load error: \(error)")
                isLoading = false
            }
        }
    }
    
    func play() {
        guard let player = player else { return }
        
        player.play()
        isPlaying = true
        startDisplayLink()
    }
    
    func pause() {
        guard let player = player else { return }
        
        player.pause()
        isPlaying = false
        stopDisplayLink()
    }
    
    func seek(to time: Double) {
        guard let player = player else { return }
        
        let clampedTime = max(0, min(time, duration))
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏ –º—ã —Ç–æ—Ç –∂–µ –∫–∞–¥—Ä
        if abs(clampedTime - lastSeekTime) < 0.016 { // –ú–µ–Ω—å—à–µ –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞ –ø—Ä–∏ 60fps
            return
        }
        
        lastSeekTime = clampedTime
        currentTime = clampedTime
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–≥–æ –∫–∞–¥—Ä–∞
        if let cachedFrame = frameCache[clampedTime] {
            currentFrame = cachedFrame
            print("üé¨ VideoProcessor: Using cached frame at \(clampedTime)s")
        } else {
            let cmTime = CMTime(seconds: clampedTime, preferredTimescale: 600)
            player.seek(to: cmTime) { [weak self] _ in
                Task { @MainActor in
                    self?.updateFrame()
                }
            }
        }
    }
    
    func getCurrentFrame() -> CIImage? {
        return currentFrame
    }
    
    // MARK: - Private Methods
    
    private func setupVideoOutput() {
        guard let playerItem = playerItem else { return }
        
        let settings = [
            kCVPixelBufferPixelFormatTypeKey as String: Int(kCVPixelFormatType_32BGRA)
        ]
        
        videoOutput = AVPlayerItemVideoOutput(pixelBufferAttributes: settings)
        guard let videoOutput = videoOutput else { return }
        
        playerItem.add(videoOutput)
    }
    
    private func loadFirstFrame() async {
        guard let asset = asset else { return }
        
        let imageGenerator = AVAssetImageGenerator(asset: asset)
        imageGenerator.appliesPreferredTrackTransform = true
        imageGenerator.requestedTimeToleranceAfter = .zero
        imageGenerator.requestedTimeToleranceBefore = .zero
        
        self.imageGenerator = imageGenerator
        
        let time = CMTime(seconds: 0, preferredTimescale: 600)
        
        do {
            let cgImage = try await imageGenerator.image(at: time).image
            let ciImage = CIImage(cgImage: cgImage)
            
            currentFrame = ciImage
            frameCache[0.0] = ciImage
            print("üñºÔ∏è First frame generated: extent=\(ciImage.extent)")
        } catch {
            print("‚ùå Error loading first frame: \(error)")
        }
    }
    
#if os(macOS)
    private func startDisplayLink() {
        stopDisplayLink()
        
        var displayLink: CVDisplayLink?
        let displayLinkCallback: CVDisplayLinkOutputCallback = { (displayLink, inNow, inOutputTime, flagsIn, flagsOut, displayLinkContext) in
            let processor = Unmanaged<VideoProcessor>.fromOpaque(displayLinkContext!).takeUnretainedValue()
            Task { @MainActor in
                processor.updateFrame()
            }
            return kCVReturnSuccess
        }
        
        CVDisplayLinkCreateWithActiveCGDisplays(&displayLink)
        
        if let displayLink = displayLink {
            CVDisplayLinkSetOutputCallback(displayLink, displayLinkCallback, UnsafeMutableRawPointer(Unmanaged.passUnretained(self).toOpaque()))
            CVDisplayLinkStart(displayLink)
            self.displayLink = displayLink
        }
    }
    
    private func stopDisplayLink() {
        if let displayLink = displayLink {
            CVDisplayLinkStop(displayLink)
            self.displayLink = nil
        }
    }
    
    private func updateFrame() {
        guard let videoOutput = videoOutput,
              let playerItem = playerItem else { return }
        
        let currentTime = CMTimeGetSeconds(playerItem.currentTime())
        self.currentTime = currentTime
        
        let itemTime = videoOutput.itemTime(forHostTime: CACurrentMediaTime())
        
        if videoOutput.hasNewPixelBuffer(forItemTime: itemTime) {
            if let pixelBuffer = videoOutput.copyPixelBuffer(forItemTime: itemTime, itemTimeForDisplay: nil) {
                let ciImage = CIImage(cvPixelBuffer: pixelBuffer)
                currentFrame = ciImage
                
                // –ö—ç—à–∏—Ä—É–µ–º –∫–∞–¥—Ä
                frameCache[currentTime] = ciImage
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                if frameCache.count > maxCacheSize {
                    let sortedKeys = frameCache.keys.sorted()
                    let keysToRemove = sortedKeys.prefix(frameCache.count - maxCacheSize)
                    for key in keysToRemove {
                        frameCache.removeValue(forKey: key)
                    }
                }
            }
        }
    }
#else
    private func startDisplayLink() {
        stopDisplayLink()
        
        displayLink = CADisplayLink(target: self, selector: #selector(updateFrame))
        displayLink?.add(to: .main, forMode: .common)
    }
    
    private func stopDisplayLink() {
        displayLink?.invalidate()
        displayLink = nil
    }
    
    @objc private func updateFrame() {
        guard let videoOutput = videoOutput,
              let playerItem = playerItem else { return }
        
        let currentTime = CMTimeGetSeconds(playerItem.currentTime())
        self.currentTime = currentTime
        
        let itemTime = videoOutput.itemTime(forHostTime: CACurrentMediaTime())
        
        if videoOutput.hasNewPixelBuffer(forItemTime: itemTime) {
            if let pixelBuffer = videoOutput.copyPixelBuffer(forItemTime: itemTime, itemTimeForDisplay: nil) {
                let ciImage = CIImage(cvPixelBuffer: pixelBuffer)
                currentFrame = ciImage
                
                // –ö—ç—à–∏—Ä—É–µ–º –∫–∞–¥—Ä
                frameCache[currentTime] = ciImage
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                if frameCache.count > maxCacheSize {
                    let sortedKeys = frameCache.keys.sorted()
                    let keysToRemove = sortedKeys.prefix(frameCache.count - maxCacheSize)
                    for key in keysToRemove {
                        frameCache.removeValue(forKey: key)
                    }
                }
            }
        }
    }
#endif
} 

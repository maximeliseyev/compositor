//
//  OptimizedMetalRenderer.swift
//  Compositor
//
//  Created by Maxim Eliseyev on 12.08.2025.
//

import Foundation
@preconcurrency import Metal
@preconcurrency import MetalKit
import SwiftUI
@preconcurrency import CoreImage

/// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Metal —Ä–µ–Ω–¥–µ—Ä–µ—Ä —Å —Å–∏—Å—Ç–µ–º–æ–π TextureData
/// –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É CIImage –∏ MTLTexture
class OptimizedMetalRenderer: ObservableObject, @unchecked Sendable {
    
    // MARK: - Metal Properties
    let device: MTLDevice
    let commandQueue: MTLCommandQueue
    private let library: MTLLibrary
    
    // MARK: - Pipeline Cache
    private var renderPipelineCache: [String: MTLRenderPipelineState] = [:]
    private var computePipelineCache: [String: MTLComputePipelineState] = [:]
    
    // MARK: - Texture Management
    let textureManager: TextureManager
    let textureDataFactory: TextureDataFactory
    let textureDataCache: TextureDataCache
    
    // MARK: - Published Properties
    @Published var isReady = false
    @Published var errorMessage: String?
    
    // MARK: - Performance Metrics
    @Published var conversionCount: Int = 0
    @Published var cacheHitRate: Double = 0.0
    @Published var averageProcessingTime: TimeInterval = 0.0
    
    private var totalConversions = 0
    private var totalCacheHits = 0
    private var totalCacheMisses = 0
    private var processingTimes: [TimeInterval] = []
    
    private init(device: MTLDevice, commandQueue: MTLCommandQueue, library: MTLLibrary, textureManager: TextureManager) {
        self.device = device
        self.commandQueue = commandQueue
        self.library = library
        self.textureManager = textureManager
        self.textureDataFactory = TextureDataFactory(textureManager: textureManager)
        self.textureDataCache = TextureDataCache(maxCacheSize: TextureDataConstants.maxCacheSize)
        
        self.isReady = true
        
        print("‚úÖ Optimized Metal initialized successfully")
        print("üì± Device: \(device.name)")
        print("üîß Max threads per group: \(device.maxThreadsPerThreadgroup)")
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä OptimizedMetalRenderer –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    static func create() async -> OptimizedMetalRenderer? {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Metal
        guard let device = MTLCreateSystemDefaultDevice() else {
            print("‚ùå Metal not supported on this device")
            return nil
        }
        
        guard let commandQueue = device.makeCommandQueue() else {
            print("‚ùå Could not create Metal command queue")
            return nil
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–µ–π–¥–µ—Ä—ã
        guard let library = device.makeDefaultLibrary() else {
            print("‚ùå Could not load Metal shaders library")
            return nil
        }
        
        let textureManager = await TextureManager(device: device)
        return OptimizedMetalRenderer(device: device, commandQueue: commandQueue, library: library, textureManager: textureManager)
    }
    
    // MARK: - Optimized Processing Interface
    
    /// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Metal —à–µ–π–¥–µ—Ä
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç TextureData –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
    func processImageOptimized(_ inputImage: CIImage, withShader shaderName: String, parameters: [String: Any] = [:]) async throws -> CIImage? {
        let startTime = CFAbsoluteTimeGetCurrent()
        
        // –°–æ–∑–¥–∞–µ–º TextureData –∏–∑ CIImage
        let inputTextureData = textureDataFactory.createFromCIImage(inputImage)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        let cacheKey = "\(shaderName)_\(inputTextureData.cacheKey)_\(String(describing: parameters).hashValue)"
        if let cachedResult = textureDataCache.get(for: cacheKey) {
            totalCacheHits += 1
            updateMetrics(processingTime: CFAbsoluteTimeGetCurrent() - startTime)
            return cachedResult.getCIImage()
        }
        
        totalCacheMisses += 1
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Metal
        let outputTextureData = try await processTextureDataOptimized(
            inputTextureData: inputTextureData,
            shaderName: shaderName,
            parameters: parameters
        )
        
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        textureDataCache.set(outputTextureData, for: cacheKey)
        
        // –ü–æ–ª—É—á–∞–µ–º CIImage –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        let result = outputTextureData.getCIImage()
        
        updateMetrics(processingTime: CFAbsoluteTimeGetCurrent() - startTime)
        
        return result
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç TextureData —á–µ—Ä–µ–∑ Metal —à–µ–π–¥–µ—Ä
    /// –ò–∑–±–µ–≥–∞–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
    private func processTextureDataOptimized(
        inputTextureData: TextureData,
        shaderName: String,
        parameters: [String: Any]
    ) async throws -> TextureData {
        
        // –ü–æ–ª—É—á–∞–µ–º MTLTexture –¥–ª—è Metal –æ–ø–µ—Ä–∞—Ü–∏–π
        let inputTexture = try await inputTextureData.getMetalTexture(device: device)
        
        // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É
        guard let outputTexture = await textureManager.acquireTexture(
            width: inputTextureData.width,
            height: inputTextureData.height,
            pixelFormat: inputTextureData.pixelFormat
        ) else {
            throw MetalError.cannotCreateTexture
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —à–µ–π–¥–µ—Ä
        try await applyComputeShaderOptimized(
            shaderName: shaderName,
            inputTexture: inputTexture,
            outputTexture: outputTexture,
            parameters: parameters
        )
        
        // –°–æ–∑–¥–∞–µ–º TextureData –∏–∑ –≤—ã—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã
        let outputTextureData = textureDataFactory.createFromMTLTexture(outputTexture)
        
        return outputTextureData
    }
    
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç compute —à–µ–π–¥–µ—Ä –∫ —Ç–µ–∫—Å—Ç—É—Ä–∞–º (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    private func applyComputeShaderOptimized(
        shaderName: String,
        inputTexture: MTLTexture,
        outputTexture: MTLTexture,
        parameters: [String: Any]
    ) async throws {
        
        guard let commandBuffer = commandQueue.makeCommandBuffer() else {
            throw MetalError.cannotCreateCommandBuffer
        }
        
        guard let computeEncoder = commandBuffer.makeComputeCommandEncoder() else {
            throw MetalError.cannotCreateEncoder
        }
        
        let pipelineState = try getComputePipelineState(for: shaderName)
        computeEncoder.setComputePipelineState(pipelineState)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã
        computeEncoder.setTexture(inputTexture, index: 0)
        computeEncoder.setTexture(outputTexture, index: 1)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if let params = parameters as? [String: Float] {
            for (key, value) in params {
                if let index = getParameterIndex(for: key) {
                    var floatValue = value
                    computeEncoder.setBytes(&floatValue, length: MemoryLayout<Float>.size, index: index)
                }
            }
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã thread groups
        let threadGroupSize = MTLSizeMake(16, 16, 1)
        let threadGroups = MTLSizeMake(
            (inputTexture.width + threadGroupSize.width - 1) / threadGroupSize.width,
            (inputTexture.height + threadGroupSize.height - 1) / threadGroupSize.height,
            1
        )
        
        computeEncoder.dispatchThreadgroups(threadGroups, threadsPerThreadgroup: threadGroupSize)
        computeEncoder.endEncoding()
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        commandBuffer.commit()
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        return try await withCheckedThrowingContinuation { continuation in
            commandBuffer.addCompletedHandler { _ in
                continuation.resume()
            }
        }
    }
    
    // MARK: - Batch Processing
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–∞–∫–µ—Ç–Ω–æ
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç GPU
    func processBatchOptimized(_ images: [CIImage], withShader shaderName: String, parameters: [String: Any] = [:]) async throws -> [CIImage?] {
        let startTime = CFAbsoluteTimeGetCurrent()
        
        // –°–æ–∑–¥–∞–µ–º TextureData –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        let inputTextureDataArray = images.map { textureDataFactory.createFromCIImage($0) }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç–Ω–æ
        let results = try await withThrowingTaskGroup(of: (Int, TextureData?).self) { group in
            for (index, inputTextureData) in inputTextureDataArray.enumerated() {
                group.addTask {
                    let result = try await self.processTextureDataOptimized(
                        inputTextureData: inputTextureData,
                        shaderName: shaderName,
                        parameters: parameters
                    )
                    return (index, result)
                }
            }
            
            var outputArray: [TextureData?] = Array(repeating: nil, count: images.count)
            for try await (index, result) in group {
                outputArray[index] = result
            }
            return outputArray
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ CIImage
        let ciImageResults = results.map { $0?.getCIImage() }
        
        updateMetrics(processingTime: CFAbsoluteTimeGetCurrent() - startTime)
        
        return ciImageResults
    }
    
    // MARK: - Pipeline Management
    
    func getRenderPipelineState(for functionName: String) throws -> MTLRenderPipelineState {
        if let cached = renderPipelineCache[functionName] {
            return cached
        }
        
        guard let function = library.makeFunction(name: functionName) else {
            throw MetalError.functionNotFound(functionName)
        }
        
        let pipelineDescriptor = MTLRenderPipelineDescriptor()
        pipelineDescriptor.vertexFunction = function
        pipelineDescriptor.fragmentFunction = function
        pipelineDescriptor.colorAttachments[0].pixelFormat = .rgba8Unorm
        
        let pipelineState = try device.makeRenderPipelineState(descriptor: pipelineDescriptor)
        renderPipelineCache[functionName] = pipelineState
        
        print("üî® Created render pipeline: \(functionName)")
        return pipelineState
    }
    
    func getComputePipelineState(for functionName: String) throws -> MTLComputePipelineState {
        if let cached = computePipelineCache[functionName] {
            return cached
        }
        
        guard let function = library.makeFunction(name: functionName) else {
            throw MetalError.functionNotFound(functionName)
        }
        
        let pipelineState = try device.makeComputePipelineState(function: function)
        computePipelineCache[functionName] = pipelineState
        
        print("üî® Created compute pipeline: \(functionName)")
        return pipelineState
    }
    
    // MARK: - Performance Monitoring
    
    private func updateMetrics(processingTime: TimeInterval) {
        DispatchQueue.main.async {
            self.processingTimes.append(processingTime)
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞
            if self.processingTimes.count > 100 {
                self.processingTimes.removeFirst()
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self.averageProcessingTime = self.processingTimes.reduce(0, +) / Double(self.processingTimes.count)
            self.conversionCount = self.totalConversions
            
            let totalCacheAccesses = self.totalCacheHits + self.totalCacheMisses
            if totalCacheAccesses > 0 {
                self.cacheHitRate = Double(self.totalCacheHits) / Double(totalCacheAccesses)
            }
        }
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    func getPerformanceStats() -> String {
        return """
        üìä Optimized Metal Performance Stats:
        üîÑ Total conversions: \(totalConversions)
        üéØ Cache hit rate: \(String(format: "%.1f", cacheHitRate * 100))%
        ‚è±Ô∏è Average processing time: \(String(format: "%.3f", averageProcessingTime))s
        üíæ Cache size: \(textureDataCache.getCacheSize())
        """
    }
    
    // MARK: - Utility Methods
    
    private func getParameterIndex(for key: String) -> Int? {
        // –ú–∞–ø–ø–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –∏–Ω–¥–µ–∫—Å—ã –±—É—Ñ–µ—Ä–æ–≤
        let parameterMap: [String: Int] = [
            "radius": 0,
            "intensity": 1,
            "threshold": 2,
            "blurType": 3
        ]
        return parameterMap[key]
    }
    
    /// –û—á–∏—â–∞–µ—Ç –∫—ç—à –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
    func cleanup() {
        textureDataCache.clear()
        renderPipelineCache.removeAll()
        computePipelineCache.removeAll()
        
        print("üßπ Optimized Metal renderer cleaned up")
    }
}

// MARK: - Error Definitions
// MetalError —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ MetalRenderer.swift

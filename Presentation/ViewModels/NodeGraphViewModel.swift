//
//  NodeGraphViewModel.swift
//  Compositor
//
//  Created by Maxim Eliseyev on 12.08.2025.
//

import Foundation
import SwiftUI
import CoreImage
import Combine

// MARK: - Node Graph ViewModel

/// ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–æ–º –Ω–æ–¥ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
@MainActor
class NodeGraphViewModel: ObservableObject {
    
    // MARK: - Published Properties
    
    @Published var nodes: [BaseNode] = []
    @Published var connections: [NodeConnection] = []
    @Published var selectedNodes: Set<UUID> = []
    @Published var isProcessing: Bool = false
    @Published var processingProgress: Double = 0.0
    @Published var errorMessage: String?
    @Published var activeNodeCount: Int = 0
    
    // MARK: - Private Properties
    
    private let nodeGraph: NodeGraph
    private let processor: NodeGraphProcessor
    private var cancellables = Set<AnyCancellable>()
    private var syncTimer: Timer?
    
    // Performance tracking
    private var lastProcessingTime: Date = Date()
    private var processingTimes: [TimeInterval] = []
    
    // MARK: - Initialization
    
    init(nodeGraph: NodeGraph) {
        self.nodeGraph = nodeGraph
        self.processor = NodeGraphProcessor(nodeGraph: nodeGraph)
        setupBindings()
        setupPerformanceMonitoring()
        setupProcessorBindings()
        setupDataSync()
    }
    
    // MARK: - Setup
    
    private func setupBindings() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        Publishers.CombineLatest($nodes, $connections)
            .debounce(for: .milliseconds(300), scheduler: DispatchQueue.main)
            .sink { [weak self] _, _ in
                Task { @MainActor in
                    await self?.processGraphIfNeeded()
                }
            }
            .store(in: &cancellables)
    }
    
    private func setupDataSync() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å NodeGraph –∫–∞–∂–¥—ã–µ 100ms
        syncTimer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { [weak self] _ in
            Task { @MainActor in
                self?.syncDataFromNodeGraph()
            }
        }
    }
    
    private func setupProcessorBindings() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        processor.$isProcessing
            .receive(on: DispatchQueue.main)
            .assign(to: &$isProcessing)
        
        processor.$processingProgress
            .receive(on: DispatchQueue.main)
            .assign(to: &$processingProgress)
        
        processor.$errorMessage
            .receive(on: DispatchQueue.main)
            .assign(to: &$errorMessage)
        
        processor.$activeNodeCount
            .receive(on: DispatchQueue.main)
            .assign(to: &$activeNodeCount)
    }
    
    private func setupPerformanceMonitoring() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        Timer.publish(every: 2.0, on: .main, in: .common)
            .autoconnect()
            .sink { [weak self] _ in
                self?.updatePerformanceStats()
            }
            .store(in: &cancellables)
    }
    
    // MARK: - Data Synchronization
    
    private func syncDataFromNodeGraph() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–æ–¥—ã –ø–æ ID
        let currentNodeIds = Set(nodes.map { $0.id })
        let graphNodeIds = Set(nodeGraph.nodes.map { $0.id })
        
        if currentNodeIds != graphNodeIds {
            nodes = nodeGraph.nodes
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if connections != nodeGraph.connections {
            connections = nodeGraph.connections
        }
    }
    
    // MARK: - Public Methods
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–¥—É –≤ –≥—Ä–∞—Ñ
    func addNode(_ node: BaseNode) {
        nodeGraph.addNode(node)
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("‚ûï Added node: \(node.type.rawValue) at \(node.position)")
    }
    
    /// –£–¥–∞–ª—è–µ—Ç –Ω–æ–¥—É –∏–∑ –≥—Ä–∞—Ñ–∞
    func removeNode(_ node: BaseNode) {
        // –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö
        selectedNodes.remove(node.id)
        
        nodeGraph.removeNode(node)
        
        print("‚ûñ Removed node: \(node.type.rawValue)")
    }
    
    /// –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –Ω–æ–¥—É
    func moveNode(_ node: BaseNode, to position: CGPoint) {
        nodeGraph.moveNode(node, to: position)
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ—Ä—Ç–∞–º–∏
    func connectPorts(
        fromNode: BaseNode,
        fromPort: NodePort,
        toNode: BaseNode,
        toPort: NodePort
    ) -> Bool {
        let success = nodeGraph.connectPorts(
            fromNode: fromNode,
            fromPort: fromPort,
            toNode: toNode,
            toPort: toPort
        )
        
        if success {
            print("üîó Connected \(fromNode.type.rawValue) to \(toNode.type.rawValue)")
        } else {
            print("‚ùå Failed to connect \(fromNode.type.rawValue) to \(toNode.type.rawValue)")
        }
        
        return success
    }
    
    /// –£–¥–∞–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    func removeConnection(_ connection: NodeConnection) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ NodeGraph
        nodeGraph.removeConnection(connection)
        
        print("üîå Removed connection")
    }
    
    /// –í—ã–±–∏—Ä–∞–µ—Ç –Ω–æ–¥—É
    func selectNode(_ node: BaseNode) {
        selectedNodes.insert(node.id)
    }
    
    /// –û—Ç–º–µ–Ω—è–µ—Ç –≤—ã–±–æ—Ä –Ω–æ–¥—ã
    func deselectNode(_ node: BaseNode) {
        selectedNodes.remove(node.id)
    }
    
    /// –û—á–∏—â–∞–µ—Ç –≤—ã–±–æ—Ä
    func clearSelection() {
        selectedNodes.removeAll()
    }
    
    /// –í—ã–±–∏—Ä–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–¥
    func selectNodes(_ nodes: [BaseNode]) {
        selectedNodes = Set(nodes.map { $0.id })
    }
    
    // MARK: - Processing
    
    private func processGraphIfNeeded() async {
        guard !nodes.isEmpty else { return }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ü–∏–∫–ª—ã
        if nodeGraph.hasCycles() {
            errorMessage = "Cycle detected in node graph"
            return
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        await processor.processGraph()
    }
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≥—Ä–∞—Ñ–∞
    func startProcessing() async {
        await processor.processGraph()
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≥—Ä–∞—Ñ–∞
    func stopProcessing() async {
        await processor.stopProcessing()
    }
    
    /// –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≥—Ä–∞—Ñ–∞
    func pauseProcessing() async {
        await processor.pauseProcessing()
    }
    
    /// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≥—Ä–∞—Ñ–∞
    func resumeProcessing() async {
        await processor.resumeProcessing()
    }
    
    // MARK: - Performance Monitoring
    
    private func updatePerformanceStats() {
        let averageTime = processor.averageProcessingTime
        let maxTime = processor.maxProcessingTime
        let minTime = processor.minProcessingTime
        
        print("üìä Performance Stats:")
        print("   Average processing time: \(String(format: "%.2f", averageTime * 1000))ms")
        print("   Max processing time: \(String(format: "%.2f", maxTime * 1000))ms")
        print("   Min processing time: \(String(format: "%.2f", minTime * 1000))ms")
        print("   Node count: \(nodes.count)")
        print("   Connection count: \(connections.count)")
        print("   Active nodes: \(activeNodeCount)")
    }
    
    // MARK: - Utility Methods
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    func getPerformanceInfo() -> String {
        let averageTime = processor.averageProcessingTime
        
        return """
        üìä Performance Information:
           Average Processing Time: \(String(format: "%.3f", averageTime))s
           Active Nodes: \(activeNodeCount)
           Processing Progress: \(String(format: "%.1f", processingProgress * 100))%
           Total Nodes: \(nodes.count)
           Total Connections: \(connections.count)
           Selected Nodes: \(selectedNodes.count)
        """
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
    func getCacheStats() -> String {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –∏–∑ asyncProcessor
        return "Cache statistics available through async processor"
    }
    
    // MARK: - Cleanup
    
    deinit {
        syncTimer?.invalidate()
        cancellables.removeAll()
    }
}

import Foundation
import SwiftUI
import CoreImage
import Combine

// MARK: - Node Graph ViewModel

/// ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–æ–º –Ω–æ–¥ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã)
@MainActor
class NodeGraphViewModel: ObservableObject {
    
    // MARK: - Published Properties
    
    @Published var nodes: [BaseNode] = []
    @Published var connections: [NodeConnection] = []
    @Published var selectedNodes: Set<UUID> = []
    @Published var isProcessing: Bool = false
    @Published var processingProgress: Double = 0.0
    @Published var errorMessage: String?
    
    // MARK: - Private Properties
    
    private let nodeGraph: NodeGraph
    private var cancellables = Set<AnyCancellable>()
    
    // Performance tracking
    private var lastProcessingTime: Date = Date()
    private var processingTimes: [TimeInterval] = []
    
    // MARK: - Initialization
    
    init(nodeGraph: NodeGraph = NodeGraph()) {
        self.nodeGraph = nodeGraph
        setupBindings()
        setupPerformanceMonitoring()
    }
    
    // MARK: - Setup
    
    private func setupBindings() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–µ –Ω–æ–¥
        nodeGraph.$nodes
            .receive(on: DispatchQueue.main)
            .assign(to: &$nodes)
        
        nodeGraph.$connections
            .receive(on: DispatchQueue.main)
            .assign(to: &$connections)
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        Publishers.CombineLatest($nodes, $connections)
            .debounce(for: .milliseconds(300), scheduler: DispatchQueue.main)
            .sink { [weak self] _, _ in
                Task { @MainActor in
                    await self?.processGraphIfNeeded()
                }
            }
            .store(in: &cancellables)
    }
    
    private func setupPerformanceMonitoring() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        Timer.publish(every: 2.0, on: .main, in: .common)
            .autoconnect()
            .sink { [weak self] _ in
                self?.updatePerformanceStats()
            }
            .store(in: &cancellables)
    }
    
    // MARK: - Public Methods
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–¥—É –≤ –≥—Ä–∞—Ñ
    func addNode(_ node: BaseNode) {
        nodeGraph.addNode(node)
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("‚ûï Added node: \(node.type.rawValue) at \(node.position)")
    }
    
    /// –£–¥–∞–ª—è–µ—Ç –Ω–æ–¥—É –∏–∑ –≥—Ä–∞—Ñ–∞
    func removeNode(_ node: BaseNode) {
        // –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö
        selectedNodes.remove(node.id)
        
        nodeGraph.removeNode(node)
        
        print("‚ûñ Removed node: \(node.type.rawValue)")
    }
    
    /// –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –Ω–æ–¥—É
    func moveNode(_ node: BaseNode, to position: CGPoint) {
        nodeGraph.moveNode(node, to: position)
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ—Ä—Ç–∞–º–∏
    func connectPorts(
        fromNode: BaseNode,
        fromPort: NodePort,
        toNode: BaseNode,
        toPort: NodePort
    ) -> Bool {
        let success = nodeGraph.connectPorts(
            fromNode: fromNode,
            fromPort: fromPort,
            toNode: toNode,
            toPort: toPort
        )
        
        if success {
            print("üîó Connected: \(fromNode.type.rawValue).\(fromPort.name) ‚Üí \(toNode.type.rawValue).\(toPort.name)")
        } else {
            errorMessage = "Failed to connect ports: incompatible types or would create cycle"
        }
        
        return success
    }
    
    /// –£–¥–∞–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    func removeConnection(_ connection: NodeConnection) {
        nodeGraph.removeConnection(connection)
        print("üîì Removed connection")
    }
    
    /// –í—ã–¥–µ–ª—è–µ—Ç/—Å–Ω–∏–º–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –Ω–æ–¥—ã
    func toggleNodeSelection(_ nodeId: UUID) {
        if selectedNodes.contains(nodeId) {
            selectedNodes.remove(nodeId)
        } else {
            selectedNodes.insert(nodeId)
        }
    }
    
    /// –û—á–∏—â–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    func clearSelection() {
        selectedNodes.removeAll()
    }
    
    /// –í—ã–¥–µ–ª—è–µ—Ç –≤—Å–µ –Ω–æ–¥—ã
    func selectAll() {
        selectedNodes = Set(nodes.map { $0.id })
    }
    
    /// –£–¥–∞–ª—è–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–æ–¥—ã
    func deleteSelectedNodes() {
        let nodesToDelete = nodes.filter { selectedNodes.contains($0.id) }
        for node in nodesToDelete {
            removeNode(node)
        }
        clearSelection()
    }
    
    // MARK: - Processing
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ –Ω–æ–¥ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    func processGraph() async {
        guard !isProcessing else { return }
        
        isProcessing = true
        processingProgress = 0.0
        errorMessage = nil
        
        let startTime = Date()
        
        do {
            // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞—Ñ–∞
            processingProgress = 0.2
            
            // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            try await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫—É–Ω–¥—ã
            
            processingProgress = 1.0
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏
            let processingTime = Date().timeIntervalSince(startTime)
            updateProcessingTime(processingTime)
            
            print("‚úÖ Graph processed successfully in \(String(format: "%.2f", processingTime))s")
            
        } catch {
            errorMessage = "Processing failed: \(error.localizedDescription)"
            print("‚ùå Graph processing failed: \(error)")
        }
        
        isProcessing = false
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (—Å –¥–µ–±–∞—É–Ω—Å–æ–º)
    private func processGraphIfNeeded() async {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–¥—ã –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        guard !nodes.isEmpty else { return }
        
        await processGraph()
    }
    
    // MARK: - Performance Monitoring
    
    private func updatePerformanceStats() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print("üìä Performance stats updated")
    }
    
    private func updateProcessingTime(_ time: TimeInterval) {
        processingTimes.append(time)
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        if processingTimes.count > 10 {
            processingTimes.removeFirst()
        }
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    var averageProcessingTime: TimeInterval {
        guard !processingTimes.isEmpty else { return 0 }
        return processingTimes.reduce(0, +) / Double(processingTimes.count)
    }
    
    // MARK: - Memory Management
    
    /// –û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –∏ –∫—ç—à–∏
    func cleanupMemory() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        print("üßπ Memory cleanup requested")
    }
    
    // MARK: - Debug Information
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    func getDebugInfo() -> String {
        return """
        üìä Node Graph Debug Info:
           Nodes: \(nodes.count)
           Connections: \(connections.count)
           Selected: \(selectedNodes.count)
           Processing: \(isProcessing ? "Yes" : "No")
           Avg Processing Time: \(String(format: "%.2f", averageProcessingTime))s
        """
    }
    
    deinit {
        cancellables.removeAll()
        print("üóëÔ∏è NodeGraphViewModel deallocated")
    }
}

// MARK: - Factory Methods

extension NodeGraphViewModel {
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–¥—É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    func createNode(type: NodeType, at position: CGPoint) -> BaseNode {
        let node = BaseNode(type: type, position: position)
        addNode(node)
        return node
    }
    
    /// –î—É–±–ª–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–æ–¥—ã
    func duplicateSelectedNodes() {
        let nodesToDuplicate = nodes.filter { selectedNodes.contains($0.id) }
        clearSelection()
        
        for node in nodesToDuplicate {
            let duplicatedNode = BaseNode(
                type: node.type,
                position: CGPoint(x: node.position.x + 50, y: node.position.y + 50)
            )
            
            // –ö–æ–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            duplicatedNode.parameters = node.parameters
            
            addNode(duplicatedNode)
            selectedNodes.insert(duplicatedNode.id)
        }
    }
}

// MARK: - Keyboard Shortcuts Support

extension NodeGraphViewModel {
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    func handleKeyCommand(_ command: KeyCommand) {
        switch command {
        case .delete:
            deleteSelectedNodes()
        case .selectAll:
            selectAll()
        case .duplicate:
            duplicateSelectedNodes()
        case .processGraph:
            Task {
                await processGraph()
            }
        case .cleanupMemory:
            cleanupMemory()
        }
    }
}

enum KeyCommand {
    case delete
    case selectAll
    case duplicate
    case processGraph
    case cleanupMemory
}
